<template>
  <loader v-if="this.isLoading"></loader>
  <div v-else-if="this.isNotFound" class="error-page-block">
    <forbidden-icon></forbidden-icon>
    <h1>User does not exist</h1>
  </div>
  <div v-else-if="this.serverError" class="error-page-block">
    <status-code-icon :text="'500'" :color="'#282C34'"></status-code-icon>
    <h1>Server error</h1>
  </div>
  <div v-else>
    <toast :message="this.generalToastMessage" ref="generalToast" :background="'#282C34'"></toast>
    <toast :message="this.errorToastMessage" ref="errorToast"></toast>
    <dialog-window v-model:show="this.showDialog">
      <loader :size="'100px'" :thickness="'3px'" :color="'lightgrey'" v-if="this.isDeletingShader"></loader>
      <div v-else>
        <h2 style="text-align: center">Are you sure?</h2>
        <div class="dialog-window__buttons">
          <button class="simple-btn action-btn" @click="this.showDialog = false">Cancel</button>
          <button class="simple-btn action-btn" @click="deleteShader">Delete</button>
        </div>
      </div>
    </dialog-window>
    <div class="user-wrapper">
      <div class="user-background">
        <img
            :src="`${this.API_URL}/public/${this.user.background_url}`"
            alt=""
        >
        <input
            style="display: none;"
            v-if="this.isStoreUser"
            type="file"
            ref="backgroundInput"
            accept="image/*"
            @change="backgroundLoadHandler"
        >
        <div v-if="this.isStoreUser" class="cover-btns">
          <button class="cover-btn left-btn" @click="triggerBackgroundInput">Change cover</button>
          <button class="cover-btn right-btn" @click="handleClearBackground">Clear</button>
        </div>

      </div>
      <div class="user-info-wrapper">
        <div class="user-info__avatar" :class="{ 'editable': isStoreUser }">
          <img
              :src="`${this.API_URL}/public/${this.user.avatar_url || 'avatars/avatar.png'}`"
              class="avatar-img"
              alt="avatar"
              width="224"
              height="224"
              @click="triggerAvatarInput"
          />
          <input
              style="display: none;"
              v-if="this.isStoreUser"
              type="file"
              class="avatar-input"
              ref="avatarInput"
              accept="image/*"
              @change="avatarLoadHandler"
          >
        </div>
        <div class="user-info">
          <span class="title">{{ this.user.name }}</span>
          <span class="biography">
            <edit-icon
                v-if="isStoreUser && !this.isEditing && !isPatchingBiography"
                v-tooltip="'Edit biography'"
                :color="'#282C34'"
                class="user-info__icon editable"
                @click="handleEditClick"/>
            <check-icon
                v-if="this.isEditing && !isPatchingBiography"
                v-tooltip="'Save biography'"
                :color="'#282C34'"
                class="user-info__icon editable"
                @click="handleOkClick"></check-icon>
            <spinner
                v-else v-if="isPatchingBiography"
                class="user-info__icon"/>
            <cancel-icon
                v-if="this.isEditing"
                v-tooltip="'Cancel changes'"
                :color="'#282C34'"
                class="user-info__icon"
                :class="{ 'editable': !isPatchingBiography }"
                @click="handleCancelClick"/>
            <span v-if="!this.isEditing">{{ this.user.biography }}</span>
            <input size="140" maxlength="140" v-else type="text" v-model="this.biography_edit">
          </span>

          <span class="icon">
            <code-icon v-tooltip="'Number of user\'s shaders'"  :color="'#282C34'" class="user-info__icon"></code-icon> {{ this.user.shaders?.length || 0 }}
            <fork-icon v-tooltip="'Number of forks on user\'s shaders'" :color="'#282C34'" class="user-info__icon"></fork-icon> {{ this.user.total_forks }}
            <like-icon v-tooltip="'Number of likes on user\'s shaders'"  :color="'#282C34'" class="user-info__icon"></like-icon> {{ this.user.total_likes }}
            <comment-icon v-tooltip="'Number of comments on user\'s shaders'"  :color="'#282C34'" class="user-info__icon"></comment-icon> {{ this.user.total_comments }}
          </span>
        </div>
      </div>
    </div>

    <div class="tabs-wrapper">
      <div class="tabs">
        <button
            v-for="tab in tabs"
            :key="tab"
            :class="{ 'active': tab === activeTab }"
            class="tab"
            @click="handleTabClick(tab)">
          {{ tab }}
        </button>
      </div>

      <div v-if="activeTab === 'Shaders'" class="shaders-wrapper">
        <h1 v-if="this.user.shaders?.length === 0 || false">User has no shaders</h1>
        <pagination
            v-if="pagesCount > this.SHADERS_PER_PAGE"
            v-model:page="page"
            :pages="pagesCount"
            class="pagination"/>
        <div class="shader-grid">
          <div
              class="shader-cell"
              v-for="(shader, index) in showedShaders"
              @mouseenter="handleMouseEnter(index)"
              @mouseleave="handleMouseLeave(index)"
              @click="$router.push(`/new/${shader['id']}`)"
          >
            <shader-window
                class="shader-window"
                ref="shaders"
                :key="shader.id"
                :code="shader.code"
                :initial-pause="true"
                :disable-mouse-down-event="true"
                :disable-mouse-up-event="true"
                :disable-mouse-move-event="true"
            />
            <div class="shader-cell__info">
              <div class="info-row">
                <span class="info-label">Title:</span> <span class="info-value">{{ shader.title }}</span>
              </div>
              <div class="info-row">
                <span class="info-label">Visibility:</span> <span
                  class="info-value">{{ shader.visibility ? 'Public' : 'Private' }}</span>
              </div>
              <div class="info-row">
                <span class="info-label">Likes:</span> <span class="info-value">{{ shader.likes }}</span>
              </div>
              <div class="info-row">
                <span class="info-label">Comments:</span> <span class="info-value">{{ shader.comments }}</span>
              </div>
              <div class="info-row">
                <span class="info-label">Created at:</span> <span class="info-value">{{
                  formatDate(shader.created_at)
                }}</span>
              </div>
              <div class="info-row">
                <span class="info-label">Last update:</span> <span
                  class="info-value">{{ formatDate(shader.updated_at) }}</span>
              </div>
              <div class="info-row" :class="{'invisible' : shader.id_forked === null}">
                <span class="info-label">Forked:</span> <span
                  class="info-value">{{ truncate(shader.forked_shader ? shader.forked_shader.title : "", 17) }}</span>
              </div>
              <div class="right-icons">
                <delete-icon
                    v-if="isStoreUser"
                    v-tooltip="'Delete shader'"
                    class="icon-btn action-btn"
                    @click.stop="handleDeleteShaderClick(shader.id)"/>
                <share-icon
                    v-if="!this.isClipboardCopied || this.clipboardShaderId !== shader.id"
                    v-tooltip="'Copy link'"
                    class="icon-btn action-btn"
                    @click.stop="shareShader(shader.id)"/>
                <check-icon v-else class="icon-btn"/>
              </div>
            </div>
          </div>
        </div>
      </div>

      <table v-else-if="activeTab === 'Activity'" class="shader-table">
        <thead>
        <tr>
          <th :class="{'bottom-left-border-radius': this.user.activities.length === 0}">Activity</th>
          <th>Shader</th>
          <th :class="{'bottom-right-border-radius': this.user.activities.length === 0}">Date</th>
        </tr>
        </thead>
        <tbody>
        <tr class="shader-item" v-for="(activity,index) in user.activities" :key="index">
          <td class="shader-item__activity">
            <like-icon class="icon-btn" v-if="activity.type === 'like'"></like-icon>
            <comment-icon class="icon-btn" v-else-if="activity.type === 'comment'"></comment-icon>
            <fork-icon class="icon-btn" v-else-if="activity.type=== 'fork'"></fork-icon>
          </td>
          <td>
            <router-link :to="`/new/${activity.shader_id}`" class="shader-link">
              {{ activity.shader_title }}
            </router-link>
          </td>
          <td>{{ formatDateTime(activity.action_created_at) }}</td>
        </tr>
        </tbody>
      </table>

      <div v-else-if="activeTab === 'Account'">
        <div class="change-password-wrapper">
          <h1>Change password</h1>
          <input
              type="password"
              placeholder="Old password"
              v-model.trim="oldPassword"
              @keydown="preventWhitespace"
              required/>
          <input
              type="password"
              placeholder="New password"
              v-model.trim="newPassword"
              @keydown="preventWhitespace"
              required/>
          <input
              type="password"
              placeholder="Confirm password"
              v-model.trim="confirmPassword"
              @keydown="preventWhitespace"
              required/>
          <button class="submit-btn" type="submit" @click="changePassword">
            <span v-if="!this.isPatchingPassword">Change password</span>
            <spinner v-else/>
          </button>
          <transition name="shake">
            <label v-if="this.passwordLog" :class="{'success' : this.successedPasswordChange}">{{
                this.passwordLog
              }}</label>
          </transition>
        </div>
      </div>

    </div>
  </div>
</template>

<script>
import Loader from "@/components/Loader.vue";
import HideIcon from "@/components/UI/Icons/HideIcon.vue";
import UnhideIcon from "@/components/UI/Icons/UnhideIcon.vue";
import DeleteIcon from "@/components/UI/Icons/DeleteIcon.vue";
import ShareIcon from "@/components/UI/Icons/ShareIcon.vue";
import LikeIcon from "@/components/UI/Icons/LikeIcon.vue";
import CommentIcon from "@/components/UI/Icons/CommentIcon.vue";
import DialogWindow from "@/components/UI/DialogWindow.vue";
import ForkIcon from "@/components/UI/Icons/ForkIcon.vue";
import SaveIcon from "@/components/UI/Icons/SaveIcon.vue";
import CheckIcon from "@/components/UI/Icons/CheckIcon.vue";
import CodeIcon from "@/components/UI/Icons/CodeIcon.vue";
import ShaderWindow from "@/components/ShaderWindow.vue";
import Pagination from "@/components/pagination.vue";
import truncate from "../utils/truncate.js";
import ForbiddenIcon from "@/components/UI/Icons/ForbiddenIcon.vue";
import EditIcon from "@/components/UI/Icons/EditIcon.vue";
import CancelIcon from "@/components/UI/Icons/CancelIcon.vue";
import Spinner from "@/components/UI/Spinner.vue";
import Toast from "@/components/Toast.vue";
import StatusCodeIcon from "@/components/UI/Icons/StatusCodeIcon.vue";

export default {
  components: {
    StatusCodeIcon,
    Toast,
    Spinner,
    CancelIcon,
    EditIcon,
    ForbiddenIcon,
    Pagination,
    ShaderWindow,
    CodeIcon,
    CheckIcon,
    SaveIcon,
    ForkIcon, DialogWindow, CommentIcon, LikeIcon, ShareIcon, DeleteIcon, UnhideIcon, HideIcon, Loader
  },
  data() {
    return {
      serverError: false,
      user: {},
      isLoading: false,
      tabs: ['Shaders', 'Activity'], // Account добавляется в mounted
      activeTab: 'Shaders',
      showDialog: false,
      isDeletingShader: false,
      shaderForDelete: null,
      isClipboardCopied: false,
      clipboardShaderId: null,
      page: 1,
      SHADERS_PER_PAGE: 8,
      isNotFound: false,
      isEditing: false,
      biography_edit: null,
      isPatchingBiography: false,

      oldPassword: '',
      newPassword: '',
      confirmPassword: '',
      passwordLog: "",
      successedPasswordChange: false,
      isPatchingPassword: false,

      generalToastMessage: '',
      errorToastMessage: '',

      API_URL: import.meta.env.VITE_API_URL
    }
  },
  methods: {
    truncate,
    preventWhitespace(event) {
      if (event.key.match(/\s/)) {
        event.preventDefault();
      }
    },
    async changePassword() {
      if(this.oldPassword === "" || this.newPassword === "" || this.confirmPassword === "") {
        this.passwordLog = "All fields are required";
        return;
      }

      this.passwordLog = "";
      if (this.newPassword !== this.confirmPassword) {
        this.passwordLog = "Passwords don't match";
        return;
      }

      const payload = {
        oldPassword: this.oldPassword,
        newPassword: this.newPassword
      };

      try {
        this.isPatchingPassword = true;

        const response = await fetch(this.API_URL + '/auth/password', {
          method: 'PATCH',
          headers: {'Content-Type': 'application/json'},
          credentials: 'include',
          body: JSON.stringify(payload)
        });
        console.log(response.status);
        if (response.status === 401) {
          this.passwordLog = "Wrong old password";
          return;
        }
        this.successedPasswordChange = true;
        this.passwordLog = "Password changed successfully";
        this.oldPassword = '';
        this.newPassword = '';
        this.confirmPassword = '';
      } catch (error) {
        this.passwordLog = "Error changing password";
      } finally {
        this.isPatchingPassword = false;
      }
    },
    handleMouseEnter(index) {
      this.$refs.shaders[index].togglePause();
    },
    handleMouseLeave(index) {
      this.$refs.shaders[index].togglePause()
    },
    handleDeleteShaderClick(shaderId) {
      this.shaderForDelete = shaderId;
      this.showDialog = true
    },
    shareShader(shaderId) {
      navigator.clipboard.writeText(`${window.location.origin}/new/${shaderId}`);
      this.isClipboardCopied = true;
      this.clipboardShaderId = shaderId;
      setTimeout(() => {
        this.isClipboardCopied = false;
        this.clipboardShaderId = null;
      }, 1000);
    },
    async deleteShader() {
      this.isDeletingShader = true;
      try {
        // await new Promise(resolve => setTimeout(resolve, 1000));
        const response = await fetch(this.API_URL + '/shaders/' + this.shaderForDelete, {
          method: 'DELETE',
          headers: {'Content-Type': 'application/json'},
          credentials: 'include'
        });

        if (response.ok) {
          this.user.shaders = this.user.shaders.filter(shader => shader.id !== this.shaderForDelete);
          this.user.activities = this.user.activities.filter(activity => activity.shader_id !== this.shaderForDelete);
          this.shaderForDelete = null;
          this.generalToastMessage = 'Successfully deleted shader';
          this.$refs.generalToast.show();
        }
      } catch (error) {
        this.errorToastMessage = 'Error deleting shader';
        this.$refs.errorToast.show();
      } finally {
        this.isDeletingShader = false
        this.showDialog = false;
      }
    },
    triggerAvatarInput() {
      this.$refs.avatarInput.click();
      console.log(`${this.API_URL}/public/${this.user.avatar_url || 'avatars/avatar.png'}`)
    },
    triggerBackgroundInput() {
      this.$refs.backgroundInput.click()
    },
    async avatarLoadHandler(event) {
      const file = event.target.files[0];
      if (!file) {
        this.errorToastMessage = 'Error uploading avatar';
        this.$refs.errorToast.show();
      }

      const formData = new FormData();
      formData.append('avatar', file);

      try {
        const response = await fetch(this.API_URL + '/profile/avatar', {
          method: 'POST',
          body: formData,
          credentials: 'include'
        });

        const data = await response.json();
        this.user.avatar_url = data.avatar_url;
        this.generalToastMessage = 'Successfully uploaded avatar';
        this.$refs.generalToast.show();

      } catch (error) {
        this.errorToastMessage = 'Error uploading avatar';
        this.$refs.errorToast.show();
      }
    },
    async backgroundLoadHandler(event) {
      const file = event.target.files[0];
      if (!file) {
        this.errorToastMessage = 'Error uploading background';
        this.$refs.errorToast.show();

      }

      const formData = new FormData();
      formData.append('background', file);

      try {
        const response = await fetch(this.API_URL + '/profile/background', {
          method: 'POST',
          body: formData,
          credentials: 'include'
        });

        const data = await response.json();
        this.user.background_url = data.background_url;
        this.generalToastMessage = 'Successfully uploaded background';
        this.$refs.generalToast.show();
      } catch (error) {
        this.errorToastMessage = 'Error uploading background';
        this.$refs.errorToast.show();
      }
    },
    async handleClearBackground() {
      try {
        const response = await fetch(this.API_URL + '/profile/background', {
          method: 'DELETE',
          headers: {'Content-Type': 'application/json'},
          credentials: 'include'
        });

        if (response.ok) {
          this.user.background_url = null;
        }
      } catch (error) {
        this.errorToastMessage = 'Error clearing background';
        this.$refs.errorToast.show();
      } finally {
        // TODO возможно стоит сделать лоадер
      }
    },
    handleEditClick() {
      this.isEditing = true;
    },
    async handleOkClick() {
      if (this.biography_edit === this.user.biography) {
        this.isEditing = false;
        return;
      }
      this.isPatchingBiography = true;
      try {
        const response = await fetch(this.API_URL + '/profile/biography', {
          method: 'PATCH',
          headers: {'Content-Type': 'application/json'},
          credentials: 'include',
          body: JSON.stringify({biography: this.biography_edit})
        });
        if (response.ok) {
          this.user.biography = this.biography_edit;
          this.isEditing = false;
        }
      } catch (error) {
        this.errorToastMessage = 'Error updating biography';
        this.$refs.errorToast.show();
      } finally {
        this.isPatchingBiography = false;
      }
    },
    handleCancelClick() {
      if (this.isPatchingBiography) return;
      this.isEditing = false;
      this.biography_edit = this.user.biography;
    },
    handleTabClick(tab) {
      this.activeTab = tab
      this.passwordLog = ""
    },
    formatDate(date) {
      const _date = new Date(date);

      const day = String(_date.getDate()).padStart(2, '0');
      const month = String(_date.getMonth() + 1).padStart(2, '0');
      const year = _date.getFullYear();

      return `${day}-${month}-${year}`;
    },
    formatDateTime(date) {
      const _date = new Date(date);

      const day = String(_date.getDate()).padStart(2, '0');
      const month = String(_date.getMonth() + 1).padStart(2, '0');
      const year = _date.getFullYear();

      const hours = String(_date.getHours()).padStart(2, '0');
      const minutes = String(_date.getMinutes()).padStart(2, '0');
      const seconds = String(_date.getSeconds()).padStart(2, '0');

      return `${day}-${month}-${year} ${hours}:${minutes}:${seconds}`;
    },
  },
  computed: {
    isStoreUser() {
      return this.user.id === this.$store.state.user.id && this.$store.state.isAuth;
    },
    pagesCount() {
      return Math.ceil(this.user.shaders?.length / this.SHADERS_PER_PAGE) || 0;
    },
    showedShaders() {
      console.log(this.user.shaders)
      console.log((this.page - 1) * this.SHADERS_PER_PAGE, this.page * this.SHADERS_PER_PAGE)
      return this.user.shaders?.slice((this.page - 1) * this.SHADERS_PER_PAGE, this.page * this.SHADERS_PER_PAGE)
    }
  },
  watch: {
    page(newPage) {
      console.log(`Page changed to ${newPage}`)
      this.page = newPage;
      this.$refs.shaders.forEach(shader => {
        shader.uploadShader()
      });
    },
  },
  async mounted() {
    this.isLoading = true;
    try {
      const response = await fetch(`${this.API_URL}/profile/${this.$route.params.id}`, {
        method: "GET",
        headers: {"Content-Type": "application/json"},
        credentials: 'include',
      });
      console.log(`${this.API_URL}/profile/${this.$route.params.id}`)
      // TODO обработать 409, когда указан несуществующий пользователь
      if (response.status === 409) {
        this.isNotFound = true;
      }
      this.user = await response.json();
      this.biography_edit = this.user.biography;
        console.log(this.user);
    } catch (error) {
      console.log(error);
      this.serverError = true;
    } finally {
      this.isLoading = false;
    }
    if (this.isStoreUser) {
      this.tabs.push('Account');
    }
  }
}
</script>

<style scoped>

.user-wrapper {
  position: relative;
  width: 100%;
  font-family: 'Arial', sans-serif;
  color: #282C34;
}

/* Баннер: неизменный */
.user-background {
  width: 100%;
  height: 240px;
  overflow: hidden;
  background: linear-gradient(135deg, #0d1b2a, #1b263b, #415a77, #0d1b2a);
}

.user-background img {
  width: 100%;
  object-fit: contain;
}


.cover-btns {
  position: absolute;
  bottom: 10px;
  right: 10px;
  display: flex;
  overflow: hidden;
  border-radius: 10px;
}


.cover-btn {
  position: relative;
  padding: 8px 12px;
  background: #282C34;
  color: lightgray;
  border: none;
  opacity: 0;
  transition: background-color 0.3s ease, opacity 0.3s ease;
}

.cover-btn:hover {
  cursor: pointer;
  background-color: #3a3f4b; /* чуть светлее при наведении */
}

.cover-btn.left-btn::after {
  content: "";
  position: absolute;
  right: 0;
  top: 50%;
  transform: translateY(-50%);
  width: 1px;
  height: 50%;
  background-color: lightgray;
}

.user-background:hover .cover-btn {
  opacity: 1;
}

.user-info-wrapper {
  position: absolute;
  top: 240px; /* сразу под баннером */
  left: 32px;
  display: flex;
  align-items: flex-start;
  gap: 16px;
}


.user-info__avatar {
  position: relative;
  top: -64px; /* - половина 128px */
  z-index: 10;
}

.user-info__avatar img {
  width: 128px;
  height: 128px;
  border-radius: 50%;
  border: 4px solid rgb(53, 59, 67);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.6);
  object-fit: cover;
  transition: all 0.3s ease;
}

.user-info__avatar.editable img:hover {
  cursor: pointer;
  transform: scale(1.05);
  box-shadow: 0 4px 24px rgba(255, 255, 255, 0.5);
}

.user-info {
  display: flex;
  flex-direction: column;
  color: #282C34;
}

.user-info .title {
  font-size: 1.8rem;
  font-weight: bold;
}

.user-info .biography {
  font-weight: normal;
}

.user-info .icon {
  font-size: 1rem;
}

.user-info .biography input {
  outline: none;
  border: 1px solid #282C34;
  border-radius: 0.3rem;
  padding: 2px;
  background-color: transparent;
  color: #282C34;
}

.user-info__icon {
  height: 24px;
  width: 24px;
  vertical-align: middle;
  padding: 2px;
}

.user-info__icon.editable:hover {
  cursor: pointer;
  border: 1px solid #282C34;
  border-radius: 4px;
}

/* Основной контейнер приложения */
.tabs-wrapper {
  margin-top: 80px;

  width: 100%;
  padding: 16px;
  font-family: "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
  color: #282C34;
}

/* Секция вкладок */
.tabs {
  display: flex;
  gap: 8px;
  margin-bottom: 24px;
  position: relative;
}

.tabs::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  height: 2px;
  background-color: #e0e0e0;
  z-index: 0;
}

/* Кнопки вкладок */
.tab {
  padding: 8px 16px;
  background: transparent;
  border: none;
  border-bottom: 2px solid transparent;
  font-size: 14px;
  cursor: pointer;
  transition: border-color 0.2s ease, color 0.2s ease;
  position: relative;
  z-index: 1; /* вкладка поверх линии */

}

.tab.active {
  border-color: #282C34;
  color: #282C34;
  font-weight: 600;
}


.pagination {
  margin: 0 0 16px auto;
}


/* Таблица */
.shader-table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
  color: lightgray;
  overflow: hidden;
}

.shader-table thead tr:first-child th:first-child {
  border-top-left-radius: 10px;
}

.shader-table thead tr:first-child th:last-child {
  border-top-right-radius: 10px;
}

.shader-table tbody tr:last-child td:first-child {
  border-bottom-left-radius: 10px;
}

.shader-table tbody tr:last-child td:last-child {
  border-bottom-right-radius: 10px;
}


.bottom-left-border-radius {
  border-bottom-left-radius: 10px;
}

.bottom-right-border-radius {
  border-bottom-right-radius: 10px;
}

.shader-table th:first-child,
.shader-table td:first-child {
  width: 1%;
  white-space: nowrap;
}

/* Заголовки таблицы */
.shader-table th,
.shader-table td {
  padding: 12px 16px;
  border: 1px solid #444;
  text-align: left;

}

.shader-table th {
  color: #282C34;
}

/* Строка с шейдером */
.shader-item {
  background: #282C34;
  transition: background 0.2s ease, transform 0.1s ease;

}

.shader-item:hover {
  background: #1e1e1e;
}

/* Ссылка на шейдер */
.shader-link {
  color: lightgray;
  text-decoration: none;
}

.shader-link:hover {
  text-decoration: underline;
}

.shader-table td {
  max-width: 200px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.shader-item__activity {
  text-align: center !important;
}

.dialog-window__buttons {
  display: flex;
  justify-content: space-between;
  margin: 10px 0 0;
}


.icon-btn {
  width: 36px;
  height: 36px;
  padding: 4px;
  border-radius: 8px;
  border: 1px solid transparent;
  background: transparent;
}

.simple-btn {
  background: transparent;
  border-radius: 8px;
  border: 1px solid #282C34;
  font-size: large;
  color: lightgray;
  display: flex;
  margin: 0 5px;
  padding: 10px;
  align-items: center;
  justify-content: center;
}

.action-btn {
  transition: all 0.3s ease;
}

.action-btn:hover {
  color: white;
  border: 1px solid lightgray;
  cursor: pointer;
}


.shaders-wrapper {
  display: flex;
  flex-direction: column;
}


.shader-grid {
  display: grid;
  grid-template-columns: repeat(4, minmax(0, 1fr));
  gap: 16px;
  width: 100%;
}

.shader-cell {
  width: 100%;
  border-radius: 10px;
  transition: all 0.3s ease;
}

.shader-cell:hover {
  transform: translateY(-10px) scale(1.02);
  cursor: pointer;
  box-shadow: 0 10px 10px rgba(40, 44, 52, 0.8);

}

.shader-cell:hover .shader-cell__info {
  background: rgba(40, 40, 60, 0.9);
}

.shader-window {
  cursor: pointer;
}

.shader-window :deep(canvas) {
  border-top-left-radius: 10px;
  border-top-right-radius: 10px;
}

.shader-cell__info {
  position: relative;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 8px 16px;
  padding: 16px;
  background: rgba(40, 44, 52, 0.8);
  border-bottom-left-radius: 10px;
  border-bottom-right-radius: 10px;
  color: lightgray;
  font-family: 'JetBrains Mono', monospace;
  font-size: 0.95rem;
  transition: all 0.3s ease;
}

/* Одна строка информации */
.shader-cell__info .info-row {
  display: flex;
  align-items: center;
}

.shader-cell__info .info-label {
  flex-shrink: 0;
  margin-right: 6px;
  font-weight: 600;
  color: #a0a0ff;
}

.shader-cell__info .info-value {
  flex-grow: 1;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.shader-cell__info .right-icons {
  position: absolute;
  bottom: 10px;
  right: 10px;
}

.invisible {
  visibility: hidden;
}

.error-page-block {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 250px;
  margin-top: 100px;
  color: #282C34;
}


.change-password-wrapper {
  max-width: 400px;
  margin: 4rem auto;
  padding: 2rem;
  background-color: #ffffff;
  border-radius: 1rem;
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.08);
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.change-password-wrapper h1 {
  font-size: 1.5rem;
  font-weight: 600;
  margin-bottom: 1rem;
  text-align: center;
}

.change-password-wrapper input {
  padding: 0.75rem 1rem;
  border: 1px solid #ddd;
  border-radius: 0.5rem;
  font-size: 1rem;
  transition: border-color 0.2s ease;
}

.change-password-wrapper input:focus {
  outline: none;
  border-color: #282C34;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
}

.change-password-wrapper .submit-btn {
  padding: 0.75rem 1rem;
  background-color: #282C34;
  color: #fff;
  font-weight: 500;
  border: none;
  border-radius: 0.5rem;
  cursor: pointer;
  transition: background-color 0.2s ease, transform 0.2s ease;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-height: 2.5rem;
}

.change-password-wrapper .submit-btn:hover {
  background-color: #3a3f4b;
  transform: translateY(-3px);
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
}

.change-password-wrapper .submit-btn:active {
  transform: translateY(0);
  box-shadow: none;
}

.change-password-wrapper label {
  color: #ef4444;
  font-size: 0.875rem;
  text-align: center;
}

.change-password-wrapper label.success {
  color: green;
}


.shake-enter-active {
  animation: shake 0.5s;
}

@keyframes shake {
  0%, 100% {
    transform: translateX(0);
  }
  20%, 60% {
    transform: translateX(-8px);
  }
  40%, 80% {
    transform: translateX(8px);
  }
}

.spinner {
  width: 1rem;
  height: 1rem;
}
</style>