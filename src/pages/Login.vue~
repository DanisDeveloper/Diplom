<template>
  <div class="outer-container">

    <div class="auth-container">
      <div class="tabs">
        <button class="left-tab" :class="{ active: isLoginForm }" @click="isLoginForm = true">Login</button>
        <button class="right-tab" :class="{ active: !isLoginForm }" @click="isLoginForm = false">Registration</button>
      </div>

      <form @submit.prevent="handleSubmit" class="form">
        <div v-if="!isLoginForm" class="input-group">
          <input maxlength="20" type="text" placeholder="Name" v-model="form.name" required/>
        </div>

        <div class="input-group">
          <input maxlength="254" type="email" placeholder="Email" v-model="form.email" required/>
        </div>

        <div class="input-group">
          <input maxlength="254" type="password" placeholder="Password" v-model.trim="form.password" required/>
        </div>

        <div v-if="!isLoginForm" class="input-group">
          <input maxlength="254" type="password" placeholder="Confirm password" v-model.trim="form.confirmPassword"
                 required/>
        </div>

        <button class="submit-btn" type="submit">{{ isLoginForm ? "Sign in" : "Sign up" }}</button>
        <label>{{ errorMessage }}</label>
      </form>
    </div>
  </div>
</template>

<script>
import {checkAuth} from "@/auth/checkAuth.js";

export default {
  data() {
    return {
      isLoginForm: true, // Переключение между логином и регистрацией
      form: {
        name: "",
        email: "",
        password: "",
        confirmPassword: "",
      },
      errorMessage: "",
      API_URL: import.meta.env.VITE_API_URL
    };
  },
  methods: {
    async handleSubmit() {
      // TODO переделать, чтобы сервер работал с формой
      this.errorMessage = "";

      // Registration
      if (!this.isLoginForm) {
        if (this.form.password !== this.form.confirmPassword) {
          this.errorMessage = "Passwords are different";
          return;
        }

        const payload = {
          name: this.form.name,
          email: this.form.email,
          password: this.form.password,
        };
        try {
          const response = await fetch(this.API_URL + "/auth/register", {
            method: "POST",
            headers: {"Content-Type": "application/json"},
            body: JSON.stringify(payload),
            credentials: "include", // Для работы с куками
          });

          const data = await response.json();

          switch (response.status) {
            case 401:
              this.errorMessage = "Wrong email or password";
              return;
            case 409:
              this.errorMessage = "User already exists";
              return;
            case 422:
              this.errorMessage = "Validation error. Please check the form.";
              return;
            case 500:
              this.errorMessage = "Server error";
              return;
          }
          this.$router.push("/");
        } catch (error) {
          this.errorMessage = error.message;
        }
      }

      // Login
      try {
        const payload = {
          email: this.form.email,
          password: this.form.password,
        };
        console.log(payload)
        const response = await fetch(this.API_URL + "/auth/login", {
          method: "POST",
          headers: {"Content-Type": "application/json"},
          body: JSON.stringify(payload),
          credentials: "include", // Для работы с куками
        });
        const data = await response.json();
        switch (response.status) {
          case 401:
            this.errorMessage = "Wrong email or password";
            break;
          case 409:
            this.errorMessage = "User already exists";
            break;
          case 422:
            this.errorMessage = "Validation error. Please check the form.";
            break;
          case 500:
            this.errorMessage = "Server error";
            break;
        }

        await checkAuth(this.$store);
        this.$router.push("/");
      } catch (error) {
        this.errorMessage = error.message;
      }
    },
  },
};
</script>

<style scoped>

.auth-container {
  max-width: 400px;
  margin: 5rem auto;
  padding: 2rem;
  background-color: #ffffff;
  border-radius: 1rem;
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.08);
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  font-family: sans-serif;
}

.tabs {
  display: flex;
  justify-content: center;
}

.tabs button {
  flex: 1;
  padding: 0.75rem;
  background: none;
  border: 1px solid #ddd;
  font-size: 1rem;
  cursor: pointer;
  transition: background-color 0.2s ease, border-color 0.2s ease;
}

.left-tab {
  border-bottom-left-radius: 0.5rem;
  border-top-left-radius: 0.5rem;
}

.right-tab {
  border-bottom-right-radius: 0.5rem;
  border-top-right-radius: 0.5rem;
}

.tabs button:hover {
  background-color: #f5f5f5;
}

.tabs button.active {
  background-color: #282C34;
  color: #fff;
  border-color: #282C34;
}

.form {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.input-group {
  display: flex;
  flex-direction: column;
}

.input-group input {
  padding: 0.75rem 1rem;
  border: 1px solid #ddd;
  border-radius: 0.5rem;
  font-size: 1rem;
  transition: border-color 0.2s ease, box-shadow 0.2s ease;
}

.input-group input:focus {
  outline: none;
  border-color: #282C34;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
}

.submit-btn {
  padding: 0.75rem 1rem;
  background-color: #282C34;
  color: #fff;
  font-weight: 500;
  border: none;
  border-radius: 0.5rem;
  cursor: pointer;
  transition: background-color 0.2s ease, transform 0.2s ease;
}

.submit-btn:hover {
  background-color: #3a3f4b;
  transform: translateY(-3px);
  box-shadow: 0 8px 16px rgba(0,0,0,0.1);
}

.submit-btn:active {
  transform: translateY(0);
  box-shadow: none;
}
.auth-container label {
  color: #ef4444;
  font-size: 0.875rem;
  text-align: center;
  min-height: 1em;
}




</style>
